
#rm(list=ls())  # clear memory
library(rstan)
library(tidyverse)
library(bayesplot)
library(deSolve)
library(readxl)

WT_viral_load_data <- read_excel("PR8-viral-load.xls", sheet = 1) %>% rename(Days = Days, ViralLoad = `Viral load`)
KO_viral_load_data <- read_excel("PR8-viral-load.xls", sheet = 2) %>% rename(Days = Days, ViralLoad = `Viral load`)

WT_macrophage_data <- read_excel("Macrophage.xls", sheet = 1) %>% rename(Days = Days, Macrophage = 'Macro level')
KO_macrophage_data <- read_excel("Macrophage.xls", sheet = 2) %>% rename(Days = Days, Macrophage = 'Macro level')


time_data <- c(1,2,3,5,7)
V_data_WT <- WT_viral_load_data$ViralLoad
V_data_KO <- KO_viral_load_data$ViralLoad


time_data_macrophage <- c(1,3,5,7)
Macrophage_data_WT <- WT_macrophage_data$Macrophage
Macrophage_data_KO <- KO_macrophage_data$Macrophage




data_combined_muc1_TIV <-  list(N_T_WT = length(time_data),
                                       N_V_WT = length(V_data_WT),
                                       time_data_WT = time_data,
                                       log_viral_load_data_WT = log(V_data_WT), # above V_WT
                                       N_T_KO = length(time_data),
                                       N_V_KO = length(V_data_KO),
                                       time_data_KO = time_data,
                                       log_viral_load_data_KO = log(V_data_KO), # above V_KO
                                       N_T_Macrophage_WT = length(time_data_macrophage),
                                       N_Macrophage_WT = length(Macrophage_data_WT),
                                       time_data_Macrophage_WT = time_data_macrophage,
                                       Macrophage_data_WT = log(Macrophage_data_WT), # above Macrophage_WT
                                       N_T_Macrophage_KO = length(time_data_macrophage),
                                       N_Macrophage_KO = length(Macrophage_data_KO),
                                       time_data_Macrophage_KO = time_data_macrophage,
                                       Macrophage_data_KO = log(Macrophage_data_KO), # above Macrophage_KO
                                       t0 = 0,
                                       T0 = 1e+7,
                                       I0 = 0,
                                       V0 = 30)





## =========== Viral parameters only ==============


init_condition_TIV1 <- list(
  log10_theta = c(log10(8e-6),
                  log10(20), log10(5e-5), 
                  log10(0.1), log10(1e+3),
                  log10(3.3e+3)),
  theta = c(0.5, 3, 3, 0.5, 3.3e-3),
  sigma = c(1, 1))

init_condition_TIV2 <- list(
  log10_theta = c(log10(4e-6),
                  log10(30), log10(1e-5), 
                  log10(0.1), log10(1e+3),
                  log10(3.3e+3)),
  theta = c(0.1, 3, 10, 0.5, 3.3e-3),
  sigma = c(1, 1))

init_condition_TIV3 <- list(
  log10_theta = c(log10(2e-6),
                  log10(10), log10(2e-5), 
                  log10(0.1), log10(1e+3),
                  log10(3.3e+3)),
  theta = c(0.5, 3, 20, 0.1, 3.3e-3),
  sigma = c(1, 1))

init_condition_TIV4 <- list(
  log10_theta = c(log10(1e-6),
                  log10(40), log10(3e-5), 
                  log10(0.1), log10(1e+3),
                  log10(3.3e+3)),
  theta = c(0.1, 3, 5, 0.1, 3.3e-3),
  sigma = c(1, 1))

options(mc.cores=parallel::detectCores()) # to utilise all cores available in your computer

fit_Model_TIV <- stan("Muc1_TIV.stan",
                                    data = data_combined_muc1_TIV,
                                    seed = 20202611,  # set random seed for reproducibility
                                    iter = 2000,
                                    chains = 4,
                                    init = list(init_condition_TIV1,init_condition_TIV2,init_condition_TIV3,init_condition_TIV4),
                                    warmup = 1000,
                                    control = list(adapt_delta = 0.99, max_treedepth = 15))



print(fit_Model_TIV , pars = c("theta_WT"))
stan_dens(fit_Model_TIV , pars = c("theta_WT"), separate_chains = TRUE,nrow = 6)
# change names ! 


#fit_M2 <- stan("New_model_Stan2_lpf.stan",
#               data = data_combined_muc1_V_W,
#               #pars = c("theta_KO","sigma"),
#               seed = 20201910,  # set random seed for reproducibility
#               iter = 2500,
#               chains = 1,
#               init = list(init5_model2),
#               warmup = 1250,
#               control = list(adapt_delta = 0.99, max_treedepth = 15))



# ASSESSING AND FIXING DIVERGENCES AND TREEDEPTH PROBLEMS

mack_diagnostics <- rstan::get_sampler_params(fit_Model_TIV ) %>% 
  set_names(1) %>% 
  map_df(as_data_frame, .id = 'chain') %>% 
  group_by(chain) %>% 
  mutate(iteration = 1:length(chain)) %>% 
  mutate(warmup = iteration <= 1500)

mack_diagnostics %>% 
  group_by(warmup, chain) %>% 
  summarise(percent_divergent = mean(divergent__ > 0)) %>% 
  ggplot()+ 
  geom_col(aes(chain, percent_divergent, fill = warmup), position = 'dodge', color = 'black') + 
  scale_y_continuous(labels = scales::percent, name = "% Divergent Runs") + 
  theme_bw() # plot divergent rate for each chain 

mack_diagnostics %>% 
  ggplot(aes(iteration, treedepth__, color = chain)) + 
  geom_line() + 
  geom_hline(aes(yintercept = 15), color = 'red') + 
  theme_bw() # plot treedepth for each chain 


mack_diagnostics %>% 
  ggplot(aes(iteration, stepsize__, color = chain)) + 
  geom_line() + 
  lims(y = c(0,.1)) + 
  theme_bw() # plot stepsize for each chain 


# PARAMETER DIAGNOSTICS
para_summary <- summary(fit_Model_TIV )$summary %>% 
  as.data.frame() %>% 
  mutate(variable = rownames(.)) %>% 
  select(variable, everything()) %>% 
  as_data_frame()

# n_eff 
para_summary %>% 
  ggplot(aes(n_eff)) + 
  geom_histogram(binwidth = 1000/50) + 
  geom_vline(aes(xintercept = 1250), color = 'red')

# R_hat

para_summary %>% 
  ggplot(aes(Rhat)) + 
  geom_histogram() + 
  geom_vline(aes(xintercept = 1.01), color = 'red')

# parameter 

para_summary %>% 
  filter(variable %in% c('theta[1]', 'theta[2]', 'theta[3]','theta[4]', 'theta[5]', 'epsilon')) %>% 
  ggplot() + 
  geom_linerange(aes(variable, ymin = `2.5%`,ymax = `97.5%`)) + 
  geom_crossbar(aes(variable, mean, ymin = `25%`, ymax = `75%`), fill= 'grey') + 
  facet_wrap(~variable, scales = 'free') + 
  theme_bw()


# plot sampling parameters 
c_light <- c("#DCBCBC")
c_light_highlight <- c("#C79999")
c_mid <- c("#B97C7C")
c_mid_highlight <- c("#A25050")
c_dark <- c("#8F2727")
c_dark_highlight <- c("#7C0000")

params_cp <- as.data.frame(rstan::extract(fit_Model_TIV , permuted=FALSE))

names(params_cp) <- gsub("chain:1.", "", names(params_cp), fixed = TRUE)
names(params_cp) <- gsub("[", ".", names(params_cp), fixed = TRUE)
names(params_cp) <- gsub("]", "", names(params_cp), fixed = TRUE)
params_cp$iter <- 1:1000

plot(params_cp$iter, params_cp$theta.10, col=c_dark, pch=16, cex=0.8,
     xlab="Iteration", ylab="epsilon2 (Chain1)", ylim=c(0,1))
plot(params_cp$iter, params_cp$`chain:2.theta.10`, col=c_dark, pch=16, cex=0.8,
     xlab="Iteration", ylab="epsilon2 (Chain2)", ylim=c(0,1))

running_means <- sapply(params_cp$iter, function(n) mean(params_cp$theta.10[1:n]))
plot(params_cp$iter, running_means, col=c_dark, pch=16, cex=0.8, ylim=c(0, 1),
     xlab="Iteration", ylab="epsilon2")



divergent <- get_sampler_params(fit_Model_TIV , inc_warmup=FALSE)[[1]][,'divergent__']
params_cp$divergent <- divergent

div_params_cp <- params_cp[params_cp$divergent == 1,]
nondiv_params_cp <- params_cp[params_cp$divergent == 0,]

plot(div_params_cp$theta.9, div_params_cp$theta.10,
     col="green", pch=16, cex=0.8, xlab="phi", ylab="epsilon2",
     xlim=c(0,50), ylim=c(0,1))
points(nondiv_params_cp$theta.9, nondiv_params_cp$theta.10,
       col=c_dark, pch=16, cex=0.8)


# show mcmc_parcoord
draws <- as.array(fit_Model_TIV ,pars = c("theta_WT"))
np <- nuts_params(fit_Model_TIV )
str(np)

color_scheme_set("darkgray")
div_style <- parcoord_style_np(div_color = "green", div_size = 0.5, div_alpha = 0.9)
mcmc_parcoord(
  draws,
  transform = function(x) {(x - mean(x)) / sd(x)},
  size = 0.25,
  alpha = 0.3,
  np = np,
  np_style = div_style
)
d <- mcmc_parcoord_data(draws, np = np)
head(d)
tail(d)


# extract posterior samples for selected parameters
posterior_samples_TIV = rstan::extract(fit_Model_TIV , pars = c("theta_WT",'sigma'), inc_warmup = TRUE, permuted = FALSE)
posterior_samples_merged_after_burnin_TIV = rstan::extract(fit_Model_TIV , pars = c( "theta_WT",'sigma'))

color_scheme_set("brewer-Spectral")
mcmc_trace(posterior_samples_all_model2, n_warmup = 1000,
           facet_args = list(nrow = 4, labeller = label_parsed))

# show all marginal posterior distributions
posterior_sample_table_TIV = data.frame(epsilon1 = posterior_samples_merged_after_burnin_TIV$theta_WT[,1],
                                           beta = posterior_samples_merged_after_burnin_TIV$theta_WT[,2],
                                           delta_I = posterior_samples_merged_after_burnin_TIV$theta_WT[,3],
                                           p = posterior_samples_merged_after_burnin_TIV$theta_WT[,4],
                                           delta_V = posterior_samples_merged_after_burnin_TIV$theta_WT[,5],
                                           kappa_M = posterior_samples_merged_after_burnin_TIV$theta_WT[,6],
                                           epsilon2 = posterior_samples_merged_after_burnin_TIV$theta_WT[,7],
                                           delta_M = posterior_samples_merged_after_burnin_TIV$theta_WT[,8],
                                           phi = posterior_samples_merged_after_burnin_TIV$theta_WT[,9],
                                           I_50 = posterior_samples_merged_after_burnin_TIV$theta_WT[,10],
                                           s = posterior_samples_merged_after_burnin_TIV$theta_WT[,11])





# ================== plot posterior and prior for each parameter =================

ggplot(posterior_sample_table_TIV, aes(x = epsilon1)) + 
  geom_histogram(breaks=seq(0,1,1/50),aes(y = ..density.., color = 'posterior')) + 
  stat_function(fun = function(x) {dunif(x, 0, 1)}, aes(color = 'prior')) +
  geom_vline(aes(xintercept=quantile(epsilon1, 0.025)),
             linetype="dashed",color = 'red') + 
  geom_vline(aes(xintercept=quantile(epsilon1, 0.5)),
             linetype="solid",color = 'red') + 
  geom_vline(aes(xintercept=quantile(epsilon1, 0.975)),
             linetype="dashed",color = 'red') + 
  lims(x = c(0,1)) + 
  theme_classic() + 
  scale_colour_manual(name="Distribution",
                      values=c(posterior="black", prior="purple")) +
  theme(text = element_text(size=15)) # epsilon1 


beta_KO <-  posterior_sample_table_TIV$beta
beta_WT <-  posterior_sample_table_TIV$beta * posterior_sample_table_TIV$epsilon1
beta.df <- data.frame(beta = log10(c(beta_WT, beta_KO)), type = as.factor(rep(c('WT', 'KO'), each = length(beta_WT))))
library(plyr)
mu <- ddply(beta.df, "type", summarise, grp.mean=mean(beta))
median <- ddply(beta.df,"type", summarise, grp.median = quantile(beta, 0.5))
head(mu)
head(median)
p <- ggplot(beta.df, aes(x=beta, color=type)) +
  geom_histogram(aes(y = ..density..),fill = "white", position="dodge", alpha = 1, binwidth = 1/30)+
  theme(legend.position="top")+
  #scale_color_grey()+scale_fill_grey() + 
  theme_classic() 

p +  geom_vline(data=median, aes(xintercept=grp.median, color=type),
                linetype="solid") +
  stat_function(fun = function(x) {dnorm(x, -6, 4)}, aes(color = 'prior')) +
  lims(x = c(-10,-2)) + xlab('log10(beta)')          # beta



ggplot(posterior_sample_table_TIV, aes(x = delta_I)) + 
  geom_histogram(breaks=seq(0,10,10/100),aes(y = ..density.., color = 'posterior')) + 
  stat_function(fun = function(x) {dlnorm(x, log(0.89), 1)}, aes(color = 'prior')) +
  geom_vline(aes(xintercept=quantile(delta_I, 0.025)),
             linetype="dashed",color = 'red') + 
  geom_vline(aes(xintercept=quantile(delta_I, .5)),
             linetype="solid",color = 'red') + 
  geom_vline(aes(xintercept=quantile(delta_I, 0.975)),
             linetype="dashed",color = 'red') + 
  lims(x = c(0, 10)) + 
  theme_classic() + 
  scale_colour_manual(name="Distribution",
                      values=c(posterior="black", prior="purple")) # delta_I





ggplot(posterior_sample_table_TIV, aes(x = log10(p))) + 
  geom_histogram(breaks=seq(-3,2,12/100),aes(y = ..density.., color = 'posterior')) + 
  stat_function(fun = function(x) {dnorm(x, -2, 4)}, aes(color = 'prior')) +
  geom_vline(aes(xintercept=log10(quantile(p, 0.025))),
             linetype="dashed",color = 'red') + 
  geom_vline(aes(xintercept=log10(quantile(p, 0.5))),
             linetype="solid",color = 'red') + 
  geom_vline(aes(xintercept=log10(quantile(p, 0.975))),
             linetype="dashed",color = 'red') + 
  lims(x = c(-3, 2)) + 
  theme_classic() + 
  scale_colour_manual(name="Distribution",
                      values=c(posterior="black", prior="purple")) # p




ggplot(posterior_sample_table_TIV, aes(x = delta_V)) + 
  geom_histogram(breaks=seq(0,50,50/100),aes(y = ..density.., color = 'posterior')) + 
  stat_function(fun = function(x) {dlnorm(x, log(28.4), 1)}, aes(color = 'prior')) +
  geom_vline(aes(xintercept=quantile(delta_V, 0.025)),
             linetype="dashed",color = 'red') + 
  geom_vline(aes(xintercept=quantile(delta_V,0.5)),
             linetype="solid",color = 'red') + 
  geom_vline(aes(xintercept=quantile(delta_V, 0.975)),
             linetype="dashed",color = 'red') + 
  lims(x = c(0,50)) + 
  theme_classic() + 
  scale_colour_manual(name="Distribution",
                      values=c(posterior="black", prior="purple")) # delta_V


ggplot(posterior_sample_table_TIV, aes(x = log10(kappa_M))) + 
  geom_histogram(breaks=seq(-20,0,20/100),aes(y = ..density.., color = 'posterior')) + 
  stat_function(fun = function(x) {dnorm(x, -6, 4)}, aes(color = 'prior')) +
  geom_vline(aes(xintercept=log10(quantile(kappa_M, 0.025))),
             linetype="dashed",color = 'red') + 
  geom_vline(aes(xintercept=log10(quantile(kappa_M,0.5))),
             linetype="solid",color = 'red') + 
  geom_vline(aes(xintercept=log10(quantile(kappa_M, 0.975))),
             linetype="dashed",color = 'red') + 
  lims(x = c(-20,0)) + 
  theme_classic() + 
  scale_colour_manual(name="Distribution",
                      values=c(posterior="white", prior="purple")) # kappa_M

V.decay <- posterior_sample_table$kappa_M * 330/posterior_sample_table$delta_M + posterior_sample_table$delta_V
V.decay.df <- data.frame(V.decay = V.decay)
ggplot(V.decay.df, aes(x = log10(V.decay))) + 
  geom_histogram(breaks=seq(-3,3,5/50), aes(y = ..density..,color = 'posterior')) + 
  #stat_function(fun = function(x) {dnorm(x, 0, 1)}, aes(color = 'prior')) +
  geom_vline(aes(xintercept=log10(quantile(V.decay, 0.025))),
             linetype="dashed",color = 'red') + 
  geom_vline(aes(xintercept=log10(quantile(V.decay, 0.5))),
             linetype="solid",color = 'red') + 
  geom_vline(aes(xintercept=log10(quantile(V.decay, 0.975))),
             linetype="dashed",color = 'red') + 
  lims(x = c(-3,3)) + 
  theme_classic() +
  scale_colour_manual(name="Distribution",
                      values=c(posterior="black", prior="purple")) # V.decay



ggplot(posterior_sample_table_TIV, aes(x = log10(s))) + 
  geom_histogram(breaks=seq(0.5,3.5,2.5/50),aes(y = ..density.., color = 'posterior')) + 
  stat_function(fun = function(x) {dnorm(x, 3,1)}, aes(color = 'prior')) +
  geom_vline(aes(xintercept=log10(quantile(s, 0.025))),
             linetype="dashed",color = 'red') + 
  geom_vline(aes(xintercept=log10(quantile(s,0.5))),
             linetype="solid",color = 'red') + 
  geom_vline(aes(xintercept=log10(quantile(s, 0.975))),
             linetype="dashed",color = 'red') + 
  lims(x = c(0.5,3.5)) + 
  theme_classic() + 
  scale_colour_manual(name="Distribution",
                      values=c(posterior="black", prior="purple")) # s = 330

ggplot(posterior_sample_table_TIV, aes(x = epsilon2)) + 
  geom_histogram(breaks=seq(0,1,1/50),aes(y = ..density.., color = 'posterior')) + 
  stat_function(fun = function(x) {dunif(x, 0, 1)}, aes(color = 'prior')) +
  geom_vline(aes(xintercept=quantile(epsilon2, 0.025)),
             linetype="dashed",color = 'red') + 
  geom_vline(aes(xintercept=quantile(epsilon2, 0.5)),
             linetype="solid",color = 'red') + 
  geom_vline(aes(xintercept=quantile(epsilon2, 0.975)),
             linetype="dashed",color = 'red') + 
  lims(x = c(0,1)) + 
  theme_classic() + 
  scale_colour_manual(name="Distribution",
                      values=c(posterior="black", prior="purple")) # epsilon2




ggplot(posterior_sample_table_TIV, aes(x = delta_M)) + 
  geom_histogram(breaks=seq(1e-5,3e-2,1e-3),aes(y = ..density.., color = 'posterior')) + 
  stat_function(fun = function(x) {dlnorm(x, log(4.2e-3), 1)}, aes(color = 'prior')) +
  geom_vline(aes(xintercept=quantile(delta_M, 0.025)),
             linetype="dashed",color = 'red') + 
  geom_vline(aes(xintercept=quantile(delta_M, 0.5)),
             linetype="solid",color = 'red') + 
  geom_vline(aes(xintercept=quantile(delta_M, 0.975)),
             linetype="dashed",color = 'red') +  
  lims(x = c(1e-5,3e-2)) + 
  theme_classic() + 
  scale_colour_manual(name="Distribution",
                      values=c(posterior="black", prior="purple")) # delta_M


ggplot(posterior_sample_table_TIV, aes(x = phi)) + 
  geom_histogram(breaks=seq(0,0.5,0.5/50),aes(y = ..density.., color = 'posterior')) + 
  stat_function(fun = function(x) {dnorm(x, 1,1e+5)}, aes(color = 'prior')) +
  geom_vline(aes(xintercept=quantile(phi, 0.025)),
             linetype="dashed",color = 'red') + 
  geom_vline(aes(xintercept=quantile(phi, 0.5)),
             linetype="solid",color = 'red') + 
  geom_vline(aes(xintercept=quantile(phi, 0.975)),
             linetype="dashed",color = 'red') +  
  lims(x = c(0,0.5)) + 
  theme_classic() + 
  scale_colour_manual(name="Distribution",
                      values=c(posterior="black", prior="purple")) # phi



ggplot(posterior_sample_table_model2, aes(x = log10(I_50))) + 
  geom_histogram(breaks=seq(0,10,10/50),aes(y = ..density.., color = 'posterior')) + 
  stat_function(fun = function(x) {dnorm(x, 0,5)}, aes(color = 'prior')) +
  #geom_vline(aes(xintercept=quantile(I_50, 0.025)),
  #           linetype="dashed",color = 'red') + 
  #geom_vline(aes(xintercept=quantile(I_50, 0.5)),
  #           linetype="solid",color = 'red') + 
  #geom_vline(aes(xintercept=quantile(I_50, 0.975)),
  #           linetype="dashed",color = 'red') +  
  lims(x = c(0,10)) + 
  theme_classic() + 
  scale_colour_manual(name="Distribution",
                      values=c(posterior="black", prior="purple")) # phi


phi_WT <-  posterior_sample_table$phi
phi_KO <-  posterior_sample_table$phi * posterior_sample_table$epsilon2
phi.df <- data.frame(phi = c(phi_WT, phi_KO), type = as.factor(rep(c('WT', 'KO'), each = length(phi_WT))))
#library(plyr)
mu.phi <- ddply(phi.df, "type", summarise, grp.mean=mean(phi))
median.phi <- ddply(phi.df,"type", summarise, grp.median = quantile(phi, 0.5))
head(mu.phi)
head(median.phi)
p <- ggplot(phi.df, aes(x=phi, color=type)) +
  geom_histogram(aes(y = ..density..),fill = "white", position="dodge", alpha = 1, binwidth = 1/1000)+
  theme(legend.position="top")+
  #scale_color_grey()+scale_fill_grey() + 
  theme_classic() 

p +  geom_vline(data=median.phi, aes(xintercept=grp.median, color=type),
                linetype="solid") +
  stat_function(fun = function(x) {dnorm(x, 1, 1e+5)}, aes(color = 'prior')) +
  lims(x = c(0,.2)) + xlab('phi')          # beta










ggplot(posterior_sample_table, aes(x = log10(330/delta_M))) + 
  geom_histogram(breaks=seq(4,5,.01),aes(y = ..density..)) + 
  #stat_function(fun = function(x) {dnorm(x, -2, 1)}, aes(color = 'prior')) +
  geom_vline(aes(xintercept=log10(quantile(330/delta_M, 0.025))),
             linetype="dashed",color = 'red') + 
  geom_vline(aes(xintercept=log10(mean(330/delta_M))),
             linetype="solid",color = 'red') + 
  geom_vline(aes(xintercept=log10(quantile(330/delta_M, 0.975))),
             linetype="dashed",color = 'red') +  
  lims(x = c(4,5)) + 
  theme_classic() 
#scale_colour_manual(name="Distribution",
#                    values=c(posterior="black", prior="purple")) # s/delta_M


ggplot(posterior_sample_table, aes(x = log10(p/delta_I))) + 
  geom_histogram(breaks=seq(-2,5,.1),aes(y = ..density..)) + 
  #stat_function(fun = function(x) {dnorm(x, -2, 1)}, aes(color = 'prior')) +
  geom_vline(aes(xintercept=log10(quantile(p/delta_I, 0.025))),
             linetype="dashed",color = 'red') + 
  geom_vline(aes(xintercept=log10(quantile(p/delta_I,0.5))),
             linetype="solid",color = 'red') + 
  geom_vline(aes(xintercept=log10(quantile(p/delta_I, 0.975))),
             linetype="dashed",color = 'red') +  
  lims(x = c(-2,5)) + 
  theme_classic() 
#scale_colour_manual(name="Distribution",
#                    values=c(posterior="black", prior="purple")) # p/delta_I




# show parameter correlations
pairs(posterior_samples_merged_after_burnin$theta_KO[,1:8], col = c("blue", "red"), labels = c('epsilon1','beta','delta_I','p','delta_V','kappa_M','epsilon2','delta_M'))#[,1:7], labels = c("epsilon1","k1","beta","delta_I", "p", "c","kappa_M"), col = c( "blue", "red"))
pairs(posterior_samples_merged_after_burnin$theta[,9:12], col = c("blue", "red"), labels = c('phi','epsilon2','k2','delta_M'))#[,1:7], labels = c("epsilon1","k1","beta","delta_I", "p", "c","kappa_M"), col = c( "blue", "red"))

upper.panel<-function(x, y){
  points(x,y, pch=19, col=c("green3", "blue"))
  r <- round(cor(x, y), digits=2)
  txt <- paste0("R = ", r)
  usr <- par("usr"); on.exit(par(usr)) # the argument passed to on.exit() is recorded without evaluation.
  par(usr = c(0, 1, 0, 1)) # usr = c(x1, x2, y1, y2) 
  text(0.5, 0.9, txt)
}

pairs(posterior_samples_merged_after_burnin$theta_KO[,1:9], labels = c('epsilon1','beta','delta_I','p','delta_V','kappa_M','epsilon2','delta_M', 'phi'), upper.panel = upper.panel, lower.panel = NULL)

df <- data.frame(pd = pd, beta = posterior_samples_merged_after_burnin$theta_KO[,2], epsilon1 = posterior_samples_merged_after_burnin$theta_KO[,1], pd2 = posterior_samples_merged_after_burnin$theta_KO[,1] * posterior_samples_merged_after_burnin$theta_KO[,2])
pairs(df, upper.panel = upper.panel, lower.panel = NULL)
# posterior predictive check
Within_host_model = function(t, y, theta){
  
  dydt1 =  0.8 * y[1] * (1 - (y[1] + y[2])/ 1e+7) - (1 - theta[1]* y[2]/(y[2] + theta[10]) ) * theta[2] * y[1] * y[3];
  dydt2 =  (1 - theta[1]* y[2]/(y[2] + theta[10]) ) * theta[2] * y[1] * y[3] - theta[3] * y[2];
  dydt3 =  theta[4] * y[2] - theta[5] * y[3] - theta[6] * y[4] * y[3];
  dydt4 =  330 + (1 - theta[7]* y[2]/(y[2] + theta[10]) ) * theta[9] * y[2] - theta[8] * y[4];
  
  list(c(dydt1, dydt2, dydt3, dydt4))
  
}

n_iteration <- 1000

t_ppc = seq(0, 10, 0.1)
V_ppc_WT = matrix(, nrow = n_iteration, ncol = length(t_ppc))
M_ppc_WT = matrix(, nrow = n_iteration, ncol = length(t_ppc))

V_ppc_KO = matrix(, nrow = n_iteration, ncol = length(t_ppc))
M_ppc_KO = matrix(, nrow = n_iteration, ncol = length(t_ppc))

lower_95PI_WT = t_ppc
median_95PI_WT = t_ppc
upper_95PI_WT = t_ppc

lower_95PI_KO = t_ppc
median_95PI_KO = t_ppc
upper_95PI_KO = t_ppc


lower_95PI_WT_M = t_ppc
median_95PI_WT_M = t_ppc
upper_95PI_WT_M = t_ppc

lower_95PI_KO_M = t_ppc
median_95PI_KO_M = t_ppc
upper_95PI_KO_M = t_ppc



for (i in 1:n_iteration){
  y_init = c(data_combined_muc1_TIV$T0, data_combined_muc1_TIV$I0, data_combined_muc1_TIV$V0, 330/posterior_sample_table_model2$delta_M[i])
  param_fit = c(posterior_sample_table_model2$epsilon1[i],
                #posterior_sample_table$k1[i],
                posterior_sample_table_model2$beta[i], 
                posterior_sample_table_model2$delta_I[i], 
                posterior_sample_table_model2$p[i], 
                posterior_sample_table_model2$delta_V[i],
                posterior_sample_table_model2$kappa_M[i],
                #posterior_sample_table$s[i],
                posterior_sample_table_model2$epsilon2[i],
                #posterior_sample_table$k2[i],
                posterior_sample_table_model2$delta_M[i],
                posterior_sample_table_model2$phi[i],
                posterior_sample_table_model2$I_50[i])
  
  param_fit_hat = c(0,
                    #posterior_sample_table$k1[i],
                    posterior_sample_table_model2$beta[i], 
                    posterior_sample_table_model2$delta_I[i], 
                    posterior_sample_table_model2$p[i], 
                    posterior_sample_table_model2$delta_V[i],
                    posterior_sample_table_model2$kappa_M[i],
                    #posterior_sample_table$s[i],
                    #posterior_sample_table$phi[i],
                    0,
                    #posterior_sample_table$k2[i],
                    posterior_sample_table_model2$delta_M[i],
                    posterior_sample_table_model2$phi[i],
                    posterior_sample_table_model2$I_50[i])
  
  model_output_WT = ode(times = t_ppc, y = y_init, func = Within_host_model, parms = param_fit, method = "bdf")
  model_output_KO = ode(times = t_ppc, y = y_init, func = Within_host_model, parms = param_fit_hat, method = "bdf")
  
  V_ppc_WT[i,] = model_output_WT[,4]
  M_ppc_WT[i,] = model_output_WT[,5] 
  
  V_ppc_KO[i,] = model_output_KO[,4]
  M_ppc_KO[i,] = model_output_KO[,5] 
}






for (i in 1:length(t_ppc)){
  temp_WT = unname(quantile(V_ppc_WT[,i], probs = c(0.025, 0.5, 0.975)))
  temp_KO = unname(quantile(V_ppc_KO[,i], probs = c(0.025, 0.5, 0.975)))
  
  
  temp_WT_M = unname(quantile(M_ppc_WT[,i], probs = c(0.025, 0.5, 0.975)))
  temp_KO_M = unname(quantile(M_ppc_KO[,i], probs = c(0.025, 0.5, 0.975)))
  
  lower_95PI_WT[i] = temp_WT[1]
  median_95PI_WT[i] = temp_WT[2]
  upper_95PI_WT[i] = temp_WT[3]
  
  lower_95PI_KO[i] = temp_KO[1]
  median_95PI_KO[i] = temp_KO[2]
  upper_95PI_KO[i] = temp_KO[3]
  
  
  lower_95PI_WT_M[i] = temp_WT_M[1]
  median_95PI_WT_M[i] = temp_WT_M[2]
  upper_95PI_WT_M[i] = temp_WT_M[3]
  
  lower_95PI_KO_M[i] = temp_KO_M[1]
  median_95PI_KO_M[i] = temp_KO_M[2]
  upper_95PI_KO_M[i] = temp_KO_M[3]
  
}

data_plot = data.frame(time = rep(c(1,2,3,5,7), each = 5),
                       V_WT = log10(exp(data_combined_muc1_TIV$log_viral_load_data_WT)),
                       V_KO = log10(exp(data_combined_muc1_TIV$log_viral_load_data_KO)))

fit_plot = data.frame(time = t_ppc,
                      lower_95PI_WT = lower_95PI_WT,
                      V_WT = median_95PI_WT,
                      upper_95PI_WT = upper_95PI_WT,
                      lower_95PI_KO = lower_95PI_KO,
                      V_KO = median_95PI_KO,
                      upper_95PI_KO = upper_95PI_KO)

ggplot(fit_plot, aes(time))+
  geom_point(data = data_plot, aes(time, V_WT), size = 3) +
  geom_line(data = fit_plot, aes(time, log10(V_WT))) +
  geom_ribbon(aes(ymin = log10(lower_95PI_WT), ymax = log10(upper_95PI_WT)), alpha = 0.5, na.rm = TRUE) +
  theme_bw() # V_WT

ggplot(fit_plot, aes(time))+
  geom_point(data = data_plot, aes(time, V_KO), size = 3) +
  geom_line(data = fit_plot, aes(time, log10(V_KO))) +
  geom_ribbon(aes(ymin = log10(lower_95PI_KO), ymax = log10(upper_95PI_KO)), alpha = 0.5, na.rm = TRUE) +
  theme_bw() # V_KO



data_plot_M_WT = data.frame(time = rep(c(1,3,5,7), c(5,5,5,4)),
                            M_WT = log10(exp(data_combined_muc1_TIV$Macrophage_data_WT)))


fit_plot_M_WT = data.frame(time = t_ppc,
                           lower_95PI_WT = lower_95PI_WT_M,
                           M_WT = median_95PI_WT_M,
                           upper_95PI_WT = upper_95PI_WT_M)


ggplot(fit_plot_M_WT, aes(time))+
  geom_point(data = data_plot_M_WT, aes(time, M_WT), size = 3) +
  geom_line(data = fit_plot_M_WT, aes(time, log10(M_WT))) +
  geom_ribbon(aes(ymin = log10(lower_95PI_WT), ymax = log10(upper_95PI_WT)), alpha = 0.5, na.rm = TRUE) +
  ylim(log10(1e+3), log10(1e+6))+
  theme_bw() # M_WT





data_plot_M_KO = data.frame(time = rep(c(1,3,5,7), c(5,4,5,6)),
                            M_KO = log10(exp(data_combined_muc1_TIV$Macrophage_data_KO)))


fit_plot_M_KO = data.frame(time = t_ppc,
                           lower_95PI_KO = lower_95PI_KO_M,
                           M_KO = median_95PI_KO_M,
                           upper_95PI_KO = upper_95PI_KO_M)


ggplot(fit_plot_M_KO, aes(time))+
  geom_point(data = data_plot_M_KO, aes(time, M_KO), size = 3) +
  geom_line(data = fit_plot_M_KO, aes(time, log10(M_KO))) +
  geom_ribbon(aes(ymin = log10(lower_95PI_KO), ymax = log10(upper_95PI_KO)), alpha = 0.5, na.rm = TRUE) +
  ylim(log10(1e+3), log10(1e+6))+
  theme_bw() # M_KO


# =============== Save the fitting results and generate outputs in CSV file  ===================
write.csv(posterior_samples_merged_after_burnin_TIV, file="Muc1_TIV_4chains.csv")
save.image(file = "fitting_results_Mu1")












functions{
  real[]  Muc1_func(real t, real[] y, real[] theta, real[] x_r, int[] x_i){
    
    real dydt[4];
    
    dydt[1] =  0.8 * y[1] * (1 - (y[1] + y[2])/ 1e+7) - (1 - theta[1]* y[2]/(y[2] + theta[10]) ) * theta[2] * y[1] * y[3];
    dydt[2] =  (1 - theta[1]* y[2]/(y[2] + theta[10]) ) * theta[2] * y[1] * y[3] - theta[3] * y[2];
    dydt[3] =  theta[4] * y[2] - theta[5] * y[3] - theta[6] * y[4] * y[3];
    dydt[4] =  theta[11] + (1 - theta[7]* y[2]/(y[2] + theta[10]) ) * theta[9] * y[2] - theta[8] * y[4];
     
    return dydt;
  }
}

data{
  int<lower = 0> N_T_WT; // length of time data WT
  int<lower = 0> N_V_WT; // length of viral load WT
  real time_data_WT[N_T_WT]; // time series data  WT
  real log_viral_load_data_WT[N_V_WT]; // viral load data WT
  
  int<lower = 0> N_T_KO; // length of time data KO
  int<lower = 0> N_V_KO; // length of viral load KO
  real time_data_KO[N_T_KO]; // time series data KO
  real log_viral_load_data_KO[N_V_KO]; // viral laod data KO
  
  int<lower = 0> N_T_Macrophage_WT;
  int<lower = 0> N_Macrophage_WT;
  real time_data_Macrophage_WT[N_T_Macrophage_WT];
  real Macrophage_data_WT[N_Macrophage_WT];
  
  int<lower = 0> N_T_Macrophage_KO;
  int<lower = 0> N_Macrophage_KO;
  real time_data_Macrophage_KO[N_T_Macrophage_KO];
  real Macrophage_data_KO[N_Macrophage_KO];
  

  real t0; // initial time point 
  real T0; // initial target cells
  real I0; // initial infected cells 
  real V0; // initial viral inoculation
}

transformed data{
  real x_r[0];
  int x_i[0];
}

parameters{
  
  real log10_theta[6]; // use log10() normal priors
  real<lower=0> theta[5]; // use lognormal priros delta_I, delta_V, delta_M and uniform distributions for epsilon1 and epsilon2
  real<lower=0> sigma[2];
}

transformed parameters{
  real y_hat_WT[N_T_WT,4];
  vector[N_V_WT] V_pred_WT; 
  real Y0_WT[4];
  real theta_WT[11];
  
  real y_hat_KO[N_T_KO,4];
  vector[N_V_KO] V_pred_KO;
  real Y0_KO[4];
  real theta_KO[11];
  
  real y_hat_WT_Macrophage[N_T_Macrophage_WT,4];
  vector[N_Macrophage_WT] Macrophage_pred_WT;
  
  real y_hat_KO_Macrophage[N_T_Macrophage_KO,4];
  vector[N_Macrophage_KO] Macrophage_pred_KO;

  
  theta_WT[1] = theta[1]; // epsilon1 
  theta_WT[2] = 10^log10_theta[1]; // beta 
  theta_WT[3] = theta[2]; // delta_I
  theta_WT[4] = 10^log10_theta[2]; // p 
  theta_WT[5] = theta[3]; // delta_V
  theta_WT[6] = 10^log10_theta[3]; // kappa_M;
  theta_WT[7] = theta[4]; // epsilon2
  theta_WT[8] = theta[5]; // delta_M
  theta_WT[9] = 10^log10_theta[4]; // phi 
  theta_WT[10] = 10^log10_theta[5]; // I_50
  theta_WT[11] = 10^log10_theta[6]; // s

  theta_KO[1] = 0;
  theta_KO[2] = 10^log10_theta[1];
  theta_KO[3] = theta[2];
  theta_KO[4] = 10^log10_theta[2];
  theta_KO[5] = theta[3];
  theta_KO[6] = 10^log10_theta[3];
  theta_KO[7] = 0;
  theta_KO[8] = theta[5];
  theta_KO[9] = 10^log10_theta[4];
  theta_KO[10] = 10^log10_theta[5];
  theta_KO[11] = 10^log10_theta[6];
  
  
  Y0_WT[1] = T0;
  Y0_WT[2] = I0;
  Y0_WT[3] = V0;
  Y0_WT[4] = theta_WT[11]/theta_WT[8];

  Y0_KO[1] = T0;
  Y0_KO[2] = I0;
  Y0_KO[3] = V0;
  Y0_KO[4] = theta_KO[11]/theta_KO[8];

  
  y_hat_WT = integrate_ode_bdf(Muc1_func, Y0_WT, t0, time_data_WT, theta_WT, x_r, x_i);
  for(i in 1:N_T_WT){
    V_pred_WT[(i-1)*5+1:i*5] = rep_vector(y_hat_WT[i,3],5);
  }
  
  y_hat_KO = integrate_ode_bdf(Muc1_func, Y0_KO, t0, time_data_KO, theta_KO, x_r, x_i);
  for(i in 1:N_T_KO){
    V_pred_KO[(i-1)*5+1:i*5] = rep_vector(y_hat_KO[i,3],5);
  }
  
  
  
  y_hat_WT_Macrophage = integrate_ode_bdf(Muc1_func, Y0_WT, t0, time_data_Macrophage_WT, theta_WT, x_r, x_i);
  Macrophage_pred_WT[1:5] = rep_vector(y_hat_WT_Macrophage[1,4],5);
  Macrophage_pred_WT[6:10] = rep_vector(y_hat_WT_Macrophage[2,4],5);
  Macrophage_pred_WT[11:15] = rep_vector(y_hat_WT_Macrophage[3,4],5);
  Macrophage_pred_WT[16:19] = rep_vector(y_hat_WT_Macrophage[4,4],4);
  
  
  y_hat_KO_Macrophage = integrate_ode_bdf(Muc1_func, Y0_KO, t0, time_data_Macrophage_KO, theta_KO, x_r, x_i);
  Macrophage_pred_KO[1:5] = rep_vector(y_hat_KO_Macrophage[1,4],5);
  Macrophage_pred_KO[6:9] = rep_vector(y_hat_KO_Macrophage[2,4],4);
  Macrophage_pred_KO[10:14] = rep_vector(y_hat_KO_Macrophage[3,4],5);
  Macrophage_pred_KO[15:20] = rep_vector(y_hat_KO_Macrophage[4,4],6);

}

model{
// priors
//log10_theta[1] ~ normal(0,2); // epsilon1
//log10_theta[2] ~ normal(-6,4); // beta
//theta[1] ~ lognormal(log(0.89), 1); // delta_I
//log10_theta[3] ~ normal(-2,4); // p
//theta[2] ~ lognormal(log(28.4), 1); // delta_V
//log10_theta[4] ~ normal(-6,4); // kappa_M
//log10_theta[5] ~ normal(0,2); // epsilon2
//theta[3] ~ lognormal(log(4.2e-3), 1); // delta_M
//log10_theta[6] ~ normal(0,5); // converting factor of I. 


theta[1] ~ uniform(0,1); // epsilon1 
log10_theta[1] ~ normal(-6,4); // beta
theta[2] ~ lognormal(log(0.89), 1); // delta_I
log10_theta[2] ~ normal(-2,4); //p 
theta[3] ~ lognormal(log(28.4), 1); // delta_V
log10_theta[3] ~ normal(-6,4); //kappa_M
theta[4] ~ uniform(0,1); // epsilon2 
theta[5] ~ lognormal(log(4.2e-3), 1); // delta_M
log10_theta[4] ~ normal(0,4); // phi
log10_theta[5] ~ normal(0,5); // I_50
log10_theta[6] ~ normal(3,1); // s

sigma[1] ~ normal(0,1);
sigma[2] ~ normal(0,1);



//log_viral_load_data_WT ~ normal(log(V_pred_WT), sigma[1]); // --> measured 
//log_viral_load_data_KO ~ normal(log(V_pred_KO), sigma[1]); 

//Macrophage_data_WT ~ normal(log(Macrophage_pred_WT), sigma[2]);
//Macrophage_data_KO ~ normal(log(Macrophage_pred_KO), sigma[2]);


for (i in 1: N_V_WT){
  target += normal_lpdf(log_viral_load_data_WT[i] | log(V_pred_WT[i]), sigma[1]);
  }
for (i in 1: N_V_KO){
  target += normal_lpdf(log_viral_load_data_KO[i] | log(V_pred_KO[i]), sigma[1]);
  }

for (i in 1: N_Macrophage_WT){
  target += normal_lpdf(Macrophage_data_WT[i] | log(Macrophage_pred_WT[i]), sigma[2]);
  }
for (i in 1: N_Macrophage_KO){
  target += normal_lpdf(Macrophage_data_KO[i] | log(Macrophage_pred_KO[i]), sigma[2]);
  }

}




